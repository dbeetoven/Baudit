{"version":3,"sources":["../../src/core/storage/DOMStorageWrapper.ts","../../src/core/storage/MemoryStorage.ts","../../src/core/storage/storage.ts","../../src/core/util/util.ts","../../src/core/util/Path.ts","../../src/core/RepoInfo.ts","../../src/realtime/Constants.ts","../../src/core/util/libs/parser.ts","../../src/core/snap/indexes/KeyIndex.ts","../../src/core/snap/snap.ts","../../src/core/util/validation.ts","../../src/api/onDisconnect.ts","../../src/api/TransactionResult.ts","../../src/core/util/NextPushId.ts","../../src/core/snap/Node.ts","../../src/core/snap/indexes/Index.ts","../../src/core/snap/LeafNode.ts","../../src/core/snap/indexes/PriorityIndex.ts","../../src/core/snap/IndexMap.ts","../../src/core/snap/ChildrenNode.ts","../../src/core/util/SortedMap.ts","../../src/core/snap/childSet.ts","../../src/core/snap/comparators.ts","../../src/core/snap/nodeFromJSON.ts","../../src/core/snap/indexes/ValueIndex.ts","../../src/api/Query.ts","../../src/core/operation/Operation.ts","../../src/core/snap/indexes/PathIndex.ts","../../src/api/DataSnapshot.ts","../../src/core/view/Event.ts","../../src/core/view/EventRegistration.ts","../../src/core/SparseSnapshotTree.ts","../../src/core/util/ServerValues.ts","../../src/core/util/ImmutableTree.ts","../../src/core/SyncPoint.ts","../../src/core/operation/AckUserWrite.ts","../../src/core/operation/ListenComplete.ts","../../src/core/operation/Overwrite.ts","../../src/core/operation/Merge.ts","../../src/core/view/CacheNode.ts","../../src/core/view/ViewCache.ts","../../src/core/view/Change.ts","../../src/core/view/filter/IndexedFilter.ts","../../src/core/view/ChildChangeAccumulator.ts","../../src/core/view/CompleteChildSource.ts","../../src/core/view/ViewProcessor.ts","../../src/core/view/EventGenerator.ts","../../src/core/view/View.ts","../../src/core/CompoundWrite.ts","../../src/core/WriteTree.ts","../../src/core/SyncTree.ts","../../src/core/SnapshotHolder.ts","../../src/core/AuthTokenProvider.ts","../../src/core/stats/StatsCollection.ts","../../src/core/stats/StatsManager.ts","../../src/core/stats/StatsListener.ts","../../src/core/stats/StatsReporter.ts","../../src/core/view/EventQueue.ts","../../src/core/util/EventEmitter.ts","../../src/core/util/VisibilityMonitor.ts","../../src/core/util/OnlineMonitor.ts","../../src/realtime/polling/PacketReceiver.ts","../../src/realtime/BrowserPollConnection.ts","../../src/core/version.ts","../../src/realtime/WebSocketConnection.ts","../../src/realtime/TransportManager.ts","../../src/realtime/Connection.ts","../../src/core/ServerActions.ts","../../src/core/PersistentConnection.ts","../../src/core/ReadonlyRestClient.ts","../../src/core/Repo.ts","../../src/core/view/filter/RangedFilter.ts","../../src/core/view/filter/LimitedFilter.ts","../../src/core/view/QueryParams.ts","../../src/api/Reference.ts","../../src/core/util/Tree.ts","../../src/core/Repo_transaction.ts","../../src/core/RepoManager.ts","../../src/api/Database.ts","../../src/api/internal.ts","../../src/api/test_access.ts","../../index.ts"],"names":["domStorage_","prefix_","set","key","value","this","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","DOMStorageWrapper","e","MemoryStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","varArgs","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Path","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","path","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","ValidationPath","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","host","secure","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","protocol","scheme","repoInfo","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","results","charAt","segment","kv","decodeQuery","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","isValidRootPathString","validateBoolean","bool","repo_","cancel","onComplete","validateArgCount","arguments","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","node","Wrap","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","Index","KEY_INDEX","KeyIndex","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","aPriority","bPriority","indexCmp","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","color","LLRBNode","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LLRBEmptyNode","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","root","base12","buildPennant","chunkSize","low","high","childTree","buildBalancedTree","namedNode","middle","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","newIndexes","addToIndexes","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Object","defineProperties","MAX","setPriorityMaxNode","json","childData","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","valueNode","indexPath_","extractChild","snap","aChild","bChild","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","DataSnapshot","forEach","childrenNode","hasChildren","getKey","getRef","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","DataEvent","snapshotNode","eventData","ctx","call","createCancelEvent","CancelEvent","matches","ValueEventRegistration","hasAnyCallback","callbacks_","eventToCheck","ChildEventRegistration","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","PathIndex","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","Query","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","children","Map","find","size","childKey","has","remember","clear","SparseSnapshotTree","forget","tree","delete","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","emptyChildrenSingleton","fromUser","fromServer","queryId","tagged","User","OperationSource","Server","forServerTaggedQuery","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","AckUserWrite","Empty","fromObject","ImmutableTree","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","ViewCache","CacheNode","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","oldSnap","valueChange","Change","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","viewCache","changes","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","ChildChangeAccumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","ViewProcessor","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","WriteTreeCompleteChildSource","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","initialViewCache","eventRegistrations_","indexFilter","IndexedFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","maybeEvent","remaining","existing","concat","generateEventsForChanges_","getInitialEvents","initialChanges","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","View","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","SyncPoint","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","writeTree_","addWrite","CompoundWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","WriteTree","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","SyncTree","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","childQueries","queryToStop","status","code","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","rootNode_","updateSnapshot","newSnapshotNode","app_","authProvider_","auth_","getImmediate","then","auth","getToken","forceRefresh","Promise","addTokenChangeListener","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","notifyForInvalidToken","errorMessage","options","counters_","incrementCounter","amount","deepCopy","getCollection","hashString","collections_","StatsCollection","getOrCreateReporter","creatorFunction","reporters_","collection_","last_","newStats","delta","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","document","addEventListener","visible_","getInstance","VisibilityMonitor","EventEmitter","online_","isMobileCordova","OnlineMonitor","currentlyOnline","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","StatsManager","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","args","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","href","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","BrowserPollConnection","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","ENV_CONSTANTS","NODE_ADMIN","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","TransportManager","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","nextConnectionId_","accessToken","Connection","interrupt","CONSTANTS","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","console","clientName","NODE_CLIENT","isReactNative","ServerActions","listens_","getListenId_","listenId","ReadonlyRestClient","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","forceRestClient","app","authProvider","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","AuthTokenProvider","search","authOverride","statsReporter_","StatsReporter","transactionsInit_","infoData_","SnapshotHolder","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","foundStartPost","changeAccumulator","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","QueryParams","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","LimitedFilter","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Repo","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","TransactionResult","startTransaction","setPriority","thennablePushRef","pushRef","OnDisconnect","TransactionStatus","childCount","name_","parent_","TreeNode","subTree","pathObj","Tree","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","prototype","transactionQueueTree_","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","repos_","useRestClient_","RepoManager","appName","dbUrl","databaseFromApp","dbEmulatorHost","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","registerDatabase","instance","setSDKVersion","registerComponent","Component","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","firebase"],"mappings":"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","file":"static/js/4.cd19bf73.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function(\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function(...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function(...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function(...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function(...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function(...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: unknown) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = '',\n    public includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexport const parseRepoInfo = function(\n  dataURL: string\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function(\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    const parts = host.split('.');\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n      // We interpret the subdomain of a 3 component URL as the namespace name.\n      namespace = subdomain;\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function(key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function(pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function(pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function(priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function(\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function(\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function(\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function(\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function(\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function(fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function(\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function(\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function(\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function(\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function() {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function(now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function(base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function(chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function(pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function() {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function() {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { Indexable } from './misc';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: { [k: string]: any } | string | number | boolean,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), (path, node) => {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (\n        !view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (\n        view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache\n        .getEventCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap\n          .getNode()\n          .getPriority()\n          .equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (\n          viewCache\n            .getEventCache()\n            .getNode()\n            .hasChild(childKey)\n        ) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function(write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseApp,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport {\n  assert,\n  CONSTANTS as ENV_CONSTANTS,\n  jsonEval,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n\n  /**\n   * @param {string} connId identifier for this transport\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = ENV_CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param {!string} id - an id for this connection\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  CONSTANTS,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' +\n          query\n            .getQueryParams()\n            .getIndex()\n            .toString() +\n          '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function() {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function(msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (CONSTANTS.NODE_ADMIN) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, jsonEval, safeGet, querystring } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { Indexable } from './util/misc';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ) {\n    const authTokenProvider = new AuthTokenProvider(app, authProvider);\n\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      const newNodeUnresolved = nodeFromJSON(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(\n        newNodeUnresolved,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = resolveDeferredValueTree(\n      this.onDisconnect_,\n      serverValues\n    );\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\nimport * as types from '@firebase/database-types';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function(\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function() {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function(\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function() {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function() {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function(\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function(\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function(\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function(changedPath: Path): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function(\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function(unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function(\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function(\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function(\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function(path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string\n  ): Database {\n    let dbUrl: string | undefined = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl);\n      repoInfo = parsedUrl.repoInfo;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { FirebaseDatabase } from '@firebase/database-types';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== (this.repo_.repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          (this.repo_.repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).checkDeleted_('delete');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).repo_ = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function() {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function(): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function(\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function(ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function(ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function(ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function(\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function(\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function(\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, url) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return RepoManager.getInstance().databaseFromApp(\n          app,\n          authProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"sourceRoot":""}